{"docstore/metadata": {"957c79f3-d335-4ff2-b164-602ff787b229": {"doc_hash": "987283a7c3d7eb9279edc528a71e52a35b979821abca841bdb96fcccbee6a11c"}, "3db9074b-365c-48fc-bcbc-a875d8b43871": {"doc_hash": "a64a21e8789d39dfb8f67845515396279188f9785622c296022b957439bf8447"}, "3e0ede1f-a6b8-4aad-b842-13aebd3b2e35": {"doc_hash": "c1bb938dc2d31f171759d0c6daa099d2d00a1747c1e7e83d46a93b28de373de5"}, "1c692429-bc94-49ec-b24e-8d18d7ae2c02": {"doc_hash": "1e3472c749acb908fe57e84b964f11f908eef84f20dd1da351e13cfa8070def3"}, "fdb6182c-fbe8-48bb-b380-b0a2236c1200": {"doc_hash": "20e347dbca983cf27af0c80c1fbda76c6dd093e3cf62306e611586bbeb9fd379"}, "cd80c2e4-ec81-43d0-bd2c-c0c8a0a4a5bf": {"doc_hash": "987283a7c3d7eb9279edc528a71e52a35b979821abca841bdb96fcccbee6a11c", "ref_doc_id": "957c79f3-d335-4ff2-b164-602ff787b229"}, "6a78305d-6635-4d37-8ca5-932879e8c8b8": {"doc_hash": "f9cbc0602b8c59982afb76328b3c7071f3659791abfa71e8f9e790e1a7158373", "ref_doc_id": "3db9074b-365c-48fc-bcbc-a875d8b43871"}, "cccbc9d2-4686-4031-b6c3-678c4f1ba505": {"doc_hash": "dafafb81d414287396f621ec6811d25228b7a285408668b90267cc0f1a78ccfb", "ref_doc_id": "3db9074b-365c-48fc-bcbc-a875d8b43871"}, "768686d5-3183-47e7-a221-e09b52b20c75": {"doc_hash": "c1bb938dc2d31f171759d0c6daa099d2d00a1747c1e7e83d46a93b28de373de5", "ref_doc_id": "3e0ede1f-a6b8-4aad-b842-13aebd3b2e35"}, "140a52fa-3870-4af9-81d0-48dd9524e7ad": {"doc_hash": "1e3472c749acb908fe57e84b964f11f908eef84f20dd1da351e13cfa8070def3", "ref_doc_id": "1c692429-bc94-49ec-b24e-8d18d7ae2c02"}, "67c3552f-5781-43c6-9986-33391eb560fb": {"doc_hash": "fdaaf9b97e832e2e93c1e6c22b7c23f3d3798c8f12385c2c927c674bc83736ce", "ref_doc_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200"}, "19f8282b-4657-4521-b003-0e3f34d444d9": {"doc_hash": "0ed14fa2be63e842c7f365d4a29570bb75b09a7f8edf80ac1fcb5ecbea6ebbc7", "ref_doc_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200"}, "38840c46-4c84-496d-9638-18a3693e2db8": {"doc_hash": "ca4f354c4033c7f314f731b3d4622d45dff8f5671f48505200fcaf7efe16f42c", "ref_doc_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200"}, "c9af06be-6f82-4781-af1f-d424938f11db": {"doc_hash": "44335eda5559ac09997d771cbc6f4e5193347e82aa8f7c334140a92e6b1be5d4", "ref_doc_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200"}, "e9a0b72e-8110-4170-a835-7a7bd8b6c71c": {"doc_hash": "4e36de2ab4ccf0b7b224c51d9e0fa5d8323fcf18f03e9fe7c0e352fdeef59f2a", "ref_doc_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200"}, "eb93403e-dba1-4451-9b4f-01245707427a": {"doc_hash": "3ac75cfdbb4a9f243cf867e4eaa0a4383a8b6bcf7006e7860dceb94b5091a0dd", "ref_doc_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200"}, "ac82f54a-2c69-43ae-94c5-f7c31fc75a7b": {"doc_hash": "ce628eca322568e44e66cea7c67f3e066a2a71297d58578674d816a7458327ad", "ref_doc_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200"}, "9ad21cbc-6143-4aaf-ad4c-1e6dd50c98a9": {"doc_hash": "b9fc53b56e5ae2fdad2bb99521784575c8ba23ac286e2dc84e0cc9954c7a4120", "ref_doc_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200"}, "1f766ba6-b7dd-4a56-9813-0470316c1dab": {"doc_hash": "9abd328d1745719c9d432f274591c4778fb3793a3e19de911ed6f72621fd3a1e", "ref_doc_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200"}, "9a0ecf07-3b69-41fc-80a9-60a0cc1ff8c5": {"doc_hash": "12f366379607d5fa67b6e2744f9c36efbb7ca9104d53f6caaf09003743675e23", "ref_doc_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200"}, "c95e9b0f-35fe-427c-bd5f-eb1c84310642": {"doc_hash": "4a430bf6eea2653ef529640eba6b593f6d33e15643d21cb6bf24ff11babfe4cf", "ref_doc_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200"}, "d928eae1-0b64-46a9-be1c-e7bd8cb6f06c": {"doc_hash": "2bb9ba32499ff774560689aacd6f5c709fbe8ac3407f7e554f03638585b70086", "ref_doc_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200"}, "53c54415-96ba-4f9b-b0fc-f331063ccac9": {"doc_hash": "385e69c1f9875986602a8d3eb652d5c3387fa93052c7b7884be27e9e19fc5609", "ref_doc_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200"}, "5790198a-f543-44c2-84aa-ef6df46862e4": {"doc_hash": "a7a043fea5f76bde7c41e105c0b05660c61ba4f9153b373f040be3ccc88e877a", "ref_doc_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200"}, "391e4a48-f00a-40eb-998f-4e187b7a0d12": {"doc_hash": "3c9fce39d7daadbe7fc796a472ed6330545be8bdf58b5dd9beeba85cc8df22e1", "ref_doc_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200"}, "7f329b3f-9e1d-4997-b101-665a0dd098c6": {"doc_hash": "ca705013cf6e7a09da4864d7aedec24c7ce2924990f91dd786d20fdaf1c444a5", "ref_doc_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200"}, "cec785c1-7d70-4a6d-a2b6-bfae2fb7c302": {"doc_hash": "726c159e29b2160258f0968f55e66da5c3b7f40b79c0e6637b423012e06228ff", "ref_doc_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200"}, "92ade2a8-4c49-43d0-9dfc-12758ca4efae": {"doc_hash": "385a95cfe7f06be773ab2239d3f160d46afde177f2cccf274ab2257f1d4f5531", "ref_doc_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200"}, "e64ba14c-4646-4945-a624-fe6bc00fdbb4": {"doc_hash": "e34b7a34ba080295937d21b39cfc80899584211f736f44975226ae5e6e8ec2fd", "ref_doc_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200"}, "4d5d3411-87d8-4cc7-84ce-6fa42cabb5c8": {"doc_hash": "afb9502adc53ec093ee3629544760a2520437eb2f5d05f52cbd1aa4235dac4f9", "ref_doc_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200"}, "3a4a4e2c-2b15-449b-8ef0-0b627c8839a2": {"doc_hash": "01d4732975c95e8ad53b88b998eba93f023a1ffcc06b46d974461b96e4f01b36", "ref_doc_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200"}, "990ae4a3-8137-45da-b19a-d09a1f8f1c44": {"doc_hash": "10ad210ac70227096364f86b6888792a84d7aa6d862c2fe9157126249c6f349f", "ref_doc_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200"}, "6ed8fe1a-4d87-44f7-bb2c-bfa0a96f7e95": {"doc_hash": "83f77c226c6760096e54d7cbdd72dba07cf27be50090b641f51d2530ec9a37ae", "ref_doc_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200"}, "3095cc7c-009f-4823-a76f-05c925d55cb2": {"doc_hash": "76fad85f29b8c3f882bb3df545b6ff63fb811e886c14d552f6ddcd56df71e795", "ref_doc_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200"}, "122d234c-9960-4573-a724-8c430ec7fd0f": {"doc_hash": "352978bd3b398105ddf56ad02a6136de85a31591b82ff720c7ed91622cc3449b", "ref_doc_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200"}, "739a35eb-8dc1-4c5f-a59f-92e2e4012a56": {"doc_hash": "ed8eeb6ed388e1ced62edf048bfefa7c0e72b48346350451f239175056d2b368", "ref_doc_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200"}}, "docstore/data": {"cd80c2e4-ec81-43d0-bd2c-c0c8a0a4a5bf": {"__data__": {"id_": "cd80c2e4-ec81-43d0-bd2c-c0c8a0a4a5bf", "embedding": null, "metadata": {"filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\build\\exe.win-amd64-3.11\\A'C'+AC.txt"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "957c79f3-d335-4ff2-b164-602ff787b229", "node_type": "4", "metadata": {"filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\build\\exe.win-amd64-3.11\\A'C'+AC.txt"}, "hash": "987283a7c3d7eb9279edc528a71e52a35b979821abca841bdb96fcccbee6a11c", "class_name": "RelatedNodeInfo"}}, "text": "F(A,B) = Z'm(0,2,5,7)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 21, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6a78305d-6635-4d37-8ca5-932879e8c8b8": {"__data__": {"id_": "6a78305d-6635-4d37-8ca5-932879e8c8b8", "embedding": null, "metadata": {"filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\build\\exe.win-amd64-3.11\\frozen_application_license.txt"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3db9074b-365c-48fc-bcbc-a875d8b43871", "node_type": "4", "metadata": {"filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\build\\exe.win-amd64-3.11\\frozen_application_license.txt"}, "hash": "a64a21e8789d39dfb8f67845515396279188f9785622c296022b957439bf8447", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cccbc9d2-4686-4031-b6c3-678c4f1ba505", "node_type": "1", "metadata": {}, "hash": "aa211322f9a992d55b277e83e3b23bfc84bdb727d4fe9e15bf37f3e75ce757ed", "class_name": "RelatedNodeInfo"}}, "text": "## Why this file is included\r\n\r\nThis program has been frozen with cx_Freeze.  The freezing process\r\nresulted in certain components from the cx_Freeze software being included\r\nin the frozen application, in particular bootstrap code for launching\r\nthe frozen python script.  The cx_Freeze software is subject to the\r\nlicense set out below.\r\n\r\n# Licensing\r\n\r\n-   Copyright \u00a9 2020-2024, Marcelo Duarte.\r\n-   Copyright \u00a9 2007-2019, Anthony Tuininga.\r\n-   Copyright \u00a9 2001-2006, Computronix (Canada) Ltd., Edmonton, Alberta,\r\n    Canada.\r\n-   All rights reserved.\r\n\r\nNOTE: This license is derived from the Python Software Foundation\r\nLicense which can be found at\r\n<https://docs.python.org/3/license.html#psf-license-agreement-for-python-release>\r\n\r\n## License for cx_Freeze\r\n\r\n1.  This LICENSE AGREEMENT is between the copyright holders and the\r\n    Individual or Organization (\"Licensee\") accessing and otherwise\r\n    using cx_Freeze software in source or binary form and its associated\r\n    documentation.\r\n2.  Subject to the terms and conditions of this License Agreement, the\r\n    copyright holders hereby grant Licensee a nonexclusive,\r\n    royalty-free, world-wide license to reproduce, analyze, test,\r\n    perform and/or display publicly, prepare derivative works,\r\n    distribute, and otherwise use cx_Freeze alone or in any derivative\r\n    version, provided, however, that this License Agreement and this\r\n    notice of copyright are retained in cx_Freeze alone or in any\r\n    derivative version prepared by Licensee.\r\n3.  In the event Licensee prepares a derivative work that is based on or\r\n    incorporates cx_Freeze or any part thereof, and wants to make the\r\n    derivative work available to others as provided herein, then\r\n    Licensee hereby agrees to include in any such work a brief summary\r\n    of the changes made to cx_Freeze.\r\n4.  The copyright holders are making cx_Freeze available to Licensee on\r\n    an \"AS IS\" basis. THE COPYRIGHT HOLDERS MAKE NO REPRESENTATIONS OR\r\n    WARRANTIES, EXPRESS OR IMPLIED.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2025, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cccbc9d2-4686-4031-b6c3-678c4f1ba505": {"__data__": {"id_": "cccbc9d2-4686-4031-b6c3-678c4f1ba505", "embedding": null, "metadata": {"filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\build\\exe.win-amd64-3.11\\frozen_application_license.txt"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3db9074b-365c-48fc-bcbc-a875d8b43871", "node_type": "4", "metadata": {"filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\build\\exe.win-amd64-3.11\\frozen_application_license.txt"}, "hash": "a64a21e8789d39dfb8f67845515396279188f9785622c296022b957439bf8447", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6a78305d-6635-4d37-8ca5-932879e8c8b8", "node_type": "1", "metadata": {"filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\build\\exe.win-amd64-3.11\\frozen_application_license.txt"}, "hash": "f9cbc0602b8c59982afb76328b3c7071f3659791abfa71e8f9e790e1a7158373", "class_name": "RelatedNodeInfo"}}, "text": "3.  In the event Licensee prepares a derivative work that is based on or\r\n    incorporates cx_Freeze or any part thereof, and wants to make the\r\n    derivative work available to others as provided herein, then\r\n    Licensee hereby agrees to include in any such work a brief summary\r\n    of the changes made to cx_Freeze.\r\n4.  The copyright holders are making cx_Freeze available to Licensee on\r\n    an \"AS IS\" basis. THE COPYRIGHT HOLDERS MAKE NO REPRESENTATIONS OR\r\n    WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE, BUT NOT\r\n    LIMITATION, THE COPYRIGHT HOLDERS MAKE NO AND DISCLAIM ANY\r\n    REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY\r\n    PARTICULAR PURPOSE OR THAT THE USE OF CX_FREEZE WILL NOT INFRINGE\r\n    ANY THIRD PARTY RIGHTS.\r\n5.  THE COPYRIGHT HOLDERS SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER\r\n    USERS OF CX_FREEZE FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL\r\n    DAMAGES OR LOSS AS A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE\r\n    USING CX_FREEZE, OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE\r\n    POSSIBILITY THEREOF.\r\n6.  This License Agreement will automatically terminate upon a material\r\n    breach of its terms and conditions.\r\n7.  Nothing in this License Agreement shall be deemed to create any\r\n    relationship of agency, partnership, or joint venture between the\r\n    copyright holders and Licensee. This License Agreement does not\r\n    grant permission to use copyright holder's trademarks or trade name\r\n    in a trademark sense to endorse or promote products or services of\r\n    Licensee, or any third party.\r\n8.  By copying, installing or otherwise using cx_Freeze, Licensee agrees\r\n    to be bound by the terms and conditions of this License Agreement.\r\n\r\nComputronix\u00ae is a registered trademark of Computronix (Canada) Ltd.", "mimetype": "text/plain", "start_char_idx": 1523, "end_char_idx": 3320, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "768686d5-3183-47e7-a221-e09b52b20c75": {"__data__": {"id_": "768686d5-3183-47e7-a221-e09b52b20c75", "embedding": null, "metadata": {"filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\build\\exe.win-amd64-3.11\\lib\\GUIsForMainGUI\\info.txt"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3e0ede1f-a6b8-4aad-b842-13aebd3b2e35", "node_type": "4", "metadata": {"filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\build\\exe.win-amd64-3.11\\lib\\GUIsForMainGUI\\info.txt"}, "hash": "c1bb938dc2d31f171759d0c6daa099d2d00a1747c1e7e83d46a93b28de373de5", "class_name": "RelatedNodeInfo"}}, "text": "This is the info page: \r\nThis program in its very crude state while fully* functional should get better in the future.\r\nThere are so many things i want to add i could literally spend a full year developing this thing,\r\nbut I digress.\r\n\r\nit is here that I will explain the GTT program at a simple level: \r\nthe GTT (Gates to TruthTable) program takes gates in this form \r\nF = AB'C'DEF'G + A'B'C'D'E'FG' + A'B'C'D'E'F'G\r\nand returns a function that describes a truth table, meaning you can construct every possible input and output from the function.\r\n\r\nThe TTG (Truth Table to Gates) program on the other hand does the opposite with a truth table,\r\nwe can minimize the ammount of logic gates needed to fufill the table.\r\nThis process is called circut minimization. These functions look like this:\r\nF(A,B,C) = Z'm(2,3,4,5)+Z'd(6,7)\r\n\r\nThere is also a Logic Simulator portion of this program. In that portion you can create some logical systems and compact them as a single chip.\r\nSecondly you can use this program to export a real design as a truth table, which you can either import into the truth table editor to see it,\r\nor you could alternativly edit the design using the power toys. so many things to do!!!\r\n\r\nNow hopefully enough of that made sense that you can try it out for your self...\r\nI am very thankful for anyone who has read this far and thank you for taking a look at my program!", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1392, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "140a52fa-3870-4af9-81d0-48dd9524e7ad": {"__data__": {"id_": "140a52fa-3870-4af9-81d0-48dd9524e7ad", "embedding": null, "metadata": {"filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\GUIsForMainGUI\\info.txt"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1c692429-bc94-49ec-b24e-8d18d7ae2c02", "node_type": "4", "metadata": {"filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\GUIsForMainGUI\\info.txt"}, "hash": "1e3472c749acb908fe57e84b964f11f908eef84f20dd1da351e13cfa8070def3", "class_name": "RelatedNodeInfo"}}, "text": "This is the info page: \r\nThis program in its very crude state while fully* functional should get better in the future.\r\nThere are so many things i want to add i could literally spend a full year developing this thing,\r\nbut I digress.\r\n\r\nit is here that I will explain the GTT program at a simple level: \r\nthe GTT (Gates to TruthTable) program takes gates in this form \r\nF = AB'C'DEF'G + A'B'C'D'E'FG' + A'B'C'D'E'F'G\r\nand returns a function that describes a truth table, meaning you can construct every possible input and output from the function.\r\n\r\nThe TTG (Truth Table to Gates) program on the other hand does the opposite with a truth table,\r\nwe can minimize the ammount of logic gates needed to fufill the table.\r\nThis process is called circut minimization. These functions look like this:\r\nF(A,B,C) = Z'm(2,3,4,5)+Z'd(6,7)\r\n\r\nThere is also a Logic Simulator portion of this program. In that portion you can create some logical systems and compact them as a single chip.\r\nSecondly you can use this program to export a real design as a truth table, which you can either import into the truth table editor to see it,\r\nor you could alternativly edit the design using the power toys. so many things to do!!!\r\n\r\nNow hopefully enough of that made sense that you can try it out for your self...\r\nI am very thankful for anyone who has read this far and thank you for taking a look at my program!", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1392, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "67c3552f-5781-43c6-9986-33391eb560fb": {"__data__": {"id_": "67c3552f-5781-43c6-9986-33391eb560fb", "embedding": null, "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200", "node_type": "4", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "20e347dbca983cf27af0c80c1fbda76c6dd093e3cf62306e611586bbeb9fd379", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "19f8282b-4657-4521-b003-0e3f34d444d9", "node_type": "1", "metadata": {}, "hash": "c5cea777555af8b9d12bbadf85cf5566c594e9c829a4a4870a70727409da8aba", "class_name": "RelatedNodeInfo"}}, "text": "Alright so starting in LogicSim V1.9.6 im going to start implementing the 4bit 12 input 8 output ALU that I defined below.\n\nHere is what it looks like to start:\n\n\n\n\n\nThe next feature I added is Loading and Saving a file to the TruthTable. GONE are the days of closing the program just to forever loose the TruthTable you were working on!\n\n\nI just loaded this table from disk, it was amazing!!!\n\n\n\n\n\n\nOK so I HATE PyQT5 so I will be staying on my Tkinter version. I realized that there was a simple solution to my issue of having to many widgets on screen at any given time. Why don\u2019t I just only show so many at any given time and make it easy to go around though the pages?!? Well that is exactly what I did with V1.9 of my program:\n\n\n\nAs you can see there are 4 pages because there 6 inputs \n\n\n\n\nI just got my PyQt5 version working and it is much more preformant:\n\n\n\n\nThough even with this I still cannot seem to generate tables as big as the one below:\n\n4 bit alu\n\nInstructions:\n\n0000: nothing\n\n0001: Add\n\n0010: Sub\n\n0011: Mult\n\n0100: Divide\n\n0101: AND\n\n0110: OR\n\n0111: XOR\n\n1000: NOT\n\n1001: NOR\n\n1010: Bit Shift Right\n\n1011: Bit Shift Left\n\n1100: Greater than\n\n1101: Less than\n\n1110: increment\n\n1111: decrement\n\nInputs:\n\n12\n\nA\n\nB\n\nC\n\nD\n\nE\n\nF\n\nG\n\nH\n\nI\n\nJ\n\nK\n\nL\n\nINSbA\n\nINSbB\n\nINSbC\n\nINSbD\n\n#1bA\n\n#1bB\n\n#1bC\n\n#1bD\n\n#1bA\n\n#1bB\n\n#1bC\n\n#1bD\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOutputs:\n\n8\n\nOut1\n\nOut2\n\nOut3\n\nOut4\n\nOut5\n\nOut6\n\nOut7\n\nOut8\n\n#1bA\n\n#1bB\n\n#1bC\n\n#1bD\n\nCarOut\n\nZero\n\nNegative\n\nOverflow", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1484, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "19f8282b-4657-4521-b003-0e3f34d444d9": {"__data__": {"id_": "19f8282b-4657-4521-b003-0e3f34d444d9", "embedding": null, "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200", "node_type": "4", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "20e347dbca983cf27af0c80c1fbda76c6dd093e3cf62306e611586bbeb9fd379", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "67c3552f-5781-43c6-9986-33391eb560fb", "node_type": "1", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "fdaaf9b97e832e2e93c1e6c22b7c23f3d3798c8f12385c2c927c674bc83736ce", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "38840c46-4c84-496d-9638-18a3693e2db8", "node_type": "1", "metadata": {}, "hash": "981e01eef9d2afa5fa7cbd6679f813b1ccbe0fc444bcc3e83d0d7bd805ad3920", "class_name": "RelatedNodeInfo"}}, "text": "Outputs:\n\n8\n\nOut1\n\nOut2\n\nOut3\n\nOut4\n\nOut5\n\nOut6\n\nOut7\n\nOut8\n\n#1bA\n\n#1bB\n\n#1bC\n\n#1bD\n\nCarOut\n\nZero\n\nNegative\n\nOverflow\n\n\n\n4xbits for result\n\n4xbits for flags: carry, zero, negative, overflow\n\n\n\n\n\n\nAh dang I realized a problem with the tkinter version of this program. There were two main issues\n\nTkinter is SUPER slow.\n\nTkinter has a big issue where it cant handle more than a few thousand widgets so for larger truthtables it all just broke down.\n\n I am going to rewrite it for PyQt5 and not look back, so this is the last entry in this readme!\n\n\n\n\nSo This time I finally caved and made another 1/3 of the core functionality actually a thing.\n\nIt is now possible to click on each output tile a 2nd time and get a X in its place. This signifies a don\u2019t care and so now you can have don\u2019t cares in your inputs! Also I must say the MAX term calculation button still does not work! That is what im going to be working on next! \ud83d\ude0a \n\n\n\n\n\nI Made the output box have a scroll bar so you can get all the info out of it:\n\n\n\n\n\nThis portion is my development of a ALU to test my program up to this point!\nInputs:\n\n2 ALU 2x2 = 4 number bits,\n\n8 instructions = 3 instruction bits\n\n\n\nOutputs:\n\n2 number bits + carry:\n\nZero?:\n\n4 output bits total", "mimetype": "text/plain", "start_char_idx": 1367, "end_char_idx": 2596, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "38840c46-4c84-496d-9638-18a3693e2db8": {"__data__": {"id_": "38840c46-4c84-496d-9638-18a3693e2db8", "embedding": null, "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200", "node_type": "4", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "20e347dbca983cf27af0c80c1fbda76c6dd093e3cf62306e611586bbeb9fd379", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "19f8282b-4657-4521-b003-0e3f34d444d9", "node_type": "1", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "0ed14fa2be63e842c7f365d4a29570bb75b09a7f8edf80ac1fcb5ecbea6ebbc7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c9af06be-6f82-4781-af1f-d424938f11db", "node_type": "1", "metadata": {}, "hash": "5d60295e84b346b11512f091c60a8b500c0afec98c107e12b296fbc976289f4f", "class_name": "RelatedNodeInfo"}}, "text": "So This time I finally caved and made another 1/3 of the core functionality actually a thing.\n\nIt is now possible to click on each output tile a 2nd time and get a X in its place. This signifies a don\u2019t care and so now you can have don\u2019t cares in your inputs! Also I must say the MAX term calculation button still does not work! That is what im going to be working on next! \ud83d\ude0a \n\n\n\n\n\nI Made the output box have a scroll bar so you can get all the info out of it:\n\n\n\n\n\nThis portion is my development of a ALU to test my program up to this point!\nInputs:\n\n2 ALU 2x2 = 4 number bits,\n\n8 instructions = 3 instruction bits\n\n\n\nOutputs:\n\n2 number bits + carry:\n\nZero?:\n\n4 output bits total\n\n\n\nInstructions:\n\n000: nothing\n\n001: Add\n\n010: Sub\n\n011: AND\n\n100: OR\n\n101: NAND\n\n110: NOR\n\n111: XOR\n\nKey: A-D = number 1 and number 2 in binary, E-G = Instruction in binary\nOut seams easy, but the reason we have Zero? In there is so that we can differentiate between off and zero as an output\n\nA\n\nB\n\nC\n\nD\n\nE\n\nF\n\nG\n\nOut1\n\nOut2\n\nOut3\n\nOut4\n\nINSbA\n\nINSbB\n\nINSbC\n\n#1bA\n\n#1bB\n\n#2bA\n\n#2bB\n\n#1bA\n\n#1bB\n\n#1Car\n\nZero?", "mimetype": "text/plain", "start_char_idx": 1916, "end_char_idx": 3006, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c9af06be-6f82-4781-af1f-d424938f11db": {"__data__": {"id_": "c9af06be-6f82-4781-af1f-d424938f11db", "embedding": null, "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200", "node_type": "4", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "20e347dbca983cf27af0c80c1fbda76c6dd093e3cf62306e611586bbeb9fd379", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "38840c46-4c84-496d-9638-18a3693e2db8", "node_type": "1", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "ca4f354c4033c7f314f731b3d4622d45dff8f5671f48505200fcaf7efe16f42c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e9a0b72e-8110-4170-a835-7a7bd8b6c71c", "node_type": "1", "metadata": {}, "hash": "eebf609b62e55085639bfc99012bc2fb11bcdc3e82a138e2a893408f65799a94", "class_name": "RelatedNodeInfo"}}, "text": "Outputs:\n\n2 number bits + carry:\n\nZero?:\n\n4 output bits total\n\n\n\nInstructions:\n\n000: nothing\n\n001: Add\n\n010: Sub\n\n011: AND\n\n100: OR\n\n101: NAND\n\n110: NOR\n\n111: XOR\n\nKey: A-D = number 1 and number 2 in binary, E-G = Instruction in binary\nOut seams easy, but the reason we have Zero? In there is so that we can differentiate between off and zero as an output\n\nA\n\nB\n\nC\n\nD\n\nE\n\nF\n\nG\n\nOut1\n\nOut2\n\nOut3\n\nOut4\n\nINSbA\n\nINSbB\n\nINSbC\n\n#1bA\n\n#1bB\n\n#2bA\n\n#2bB\n\n#1bA\n\n#1bB\n\n#1Car\n\nZero?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolved:\n\nAnswer ='s : \n\nOut1: F = B'CD'E'F + B'CD'EF'G + B'CD'FG' + B'CDE'F' + B'CDF'G' + A'CDEFG + A'BC'DF'G' + A'BC'DEF' + A'BCDF + ABC'D'F' + ACD'F + ACDF'\n\nOut2: F = B'CE'G + B'CEG' + A'BC'EF'G' + A'BC'DE'F'G + A'BC'DEG' + A'BCEFG + A'BCDEG + ABC'E'G' + ACE'G + ACEG'\n\nOut3: F = A'B'CEFG + A'B'CDF + A'B'CDEG\n\nOut4: F = A'CD'E'F'G' + A'BD'E' + A'BC'E'F + BC'FG + A'BCE'F' + A'BCF'G' + AB'C'D'E'F'G' + ACDEFG + ABC'DG + ABC'DE + BCD'E'F'G' + BCD'EF'G + ABCDE'FG'", "mimetype": "text/plain", "start_char_idx": 2535, "end_char_idx": 3497, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e9a0b72e-8110-4170-a835-7a7bd8b6c71c": {"__data__": {"id_": "e9a0b72e-8110-4170-a835-7a7bd8b6c71c", "embedding": null, "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200", "node_type": "4", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "20e347dbca983cf27af0c80c1fbda76c6dd093e3cf62306e611586bbeb9fd379", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c9af06be-6f82-4781-af1f-d424938f11db", "node_type": "1", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "44335eda5559ac09997d771cbc6f4e5193347e82aa8f7c334140a92e6b1be5d4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "eb93403e-dba1-4451-9b4f-01245707427a", "node_type": "1", "metadata": {}, "hash": "339c4b6e7ec620817f4fe030e596a7af54d2cfb6f8d1f0ef812d576ab7c69e7d", "class_name": "RelatedNodeInfo"}}, "text": "Out1: F(A,B,C,D,E,F) = Z'm(18,19,21,22,24,25,28,31,40,44,45,58,59,62,63,82,83,85,86,87,88,89,92,93,96,97,100,101,114,115,118,119,120,121,124,125)\n\nOut2: F(A,B,C,D,E,F) = Z'm(17,19,20,22,25,27,28,30,36,41,44,46,55,61,63,81,83,84,86,89,91,92,94,96,98,104,106,113,115,116,118,121,123,124,126)\n\nOut3: Z'm(5,7)\n\nOut4: F(A,B,C,D,E,F) = Z'm(16,32,33,34,35,39,42,43,47,48,49,50,51,52,53,56,57,60,64,95,99,103,105,107,108,109,110,111,112,117,122,127)\n\n\n\nWhole TruthTable:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBroken: \n\nAND: 11 | 00 = 0,0,0,0\n\nAND: 01 | 01 = 0,0,0,1\n\nNAND: 01 | 01 = 1,0,0,0\n\n\n\n\n\nThe reason OR is broken is because of a bug!!!! The bug is with my TTG thinker program, and the only reason I can think of for it not being correct is because of the amount of tables I have it limited to?\n\n\n\nSo I just learned that the AND is broken so now I have to redo all of the above problem is that no matter what I do the crux of the issue wont fix itself until I fix the bug in the thinker program:", "mimetype": "text/plain", "start_char_idx": 3501, "end_char_idx": 4471, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eb93403e-dba1-4451-9b4f-01245707427a": {"__data__": {"id_": "eb93403e-dba1-4451-9b4f-01245707427a", "embedding": null, "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200", "node_type": "4", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "20e347dbca983cf27af0c80c1fbda76c6dd093e3cf62306e611586bbeb9fd379", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e9a0b72e-8110-4170-a835-7a7bd8b6c71c", "node_type": "1", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "4e36de2ab4ccf0b7b224c51d9e0fa5d8323fcf18f03e9fe7c0e352fdeef59f2a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ac82f54a-2c69-43ae-94c5-f7c31fc75a7b", "node_type": "1", "metadata": {}, "hash": "3c0822a0ee429af0695fde38f8951a525377c8e22e9372e07fc62eeb840714d4", "class_name": "RelatedNodeInfo"}}, "text": "Whole TruthTable:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBroken: \n\nAND: 11 | 00 = 0,0,0,0\n\nAND: 01 | 01 = 0,0,0,1\n\nNAND: 01 | 01 = 1,0,0,0\n\n\n\n\n\nThe reason OR is broken is because of a bug!!!! The bug is with my TTG thinker program, and the only reason I can think of for it not being correct is because of the amount of tables I have it limited to?\n\n\n\nSo I just learned that the AND is broken so now I have to redo all of the above problem is that no matter what I do the crux of the issue wont fix itself until I fix the bug in the thinker program:\n\n\n\nStill ill redo the compute while its broken:\n\nF(A,B,C,D,E,F,G) = Z'm(18,19,21,22,24,25,28,31,40,44,45,58,59,62,63,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,92,93,96,97,100,101,114,115,118,119,120,121,124,125)\n\nF(A,B,C,D,E,F,G) = Z'm(17,19,20,22,25,27,28,30,36,41,44,46,53,55,61,63,65,67,68,69,70,71,73,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,92,94,96,98,104,106,113,115,116,118,121,123,124,126)\n\nF(A,B,C,D,E,F,G) = Z\u2019m(23,26,29,30,31)\n\nF(A,B,C,D,E,F,G) = Z'm(16,32,33,34,35,37,38,39,42,43,47,48,49,50,51,52,54,56,57,60,64,95,99,102,103,105,107,108,109,110,111,112,117,122,127)", "mimetype": "text/plain", "start_char_idx": 3946, "end_char_idx": 5080, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ac82f54a-2c69-43ae-94c5-f7c31fc75a7b": {"__data__": {"id_": "ac82f54a-2c69-43ae-94c5-f7c31fc75a7b", "embedding": null, "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200", "node_type": "4", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "20e347dbca983cf27af0c80c1fbda76c6dd093e3cf62306e611586bbeb9fd379", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "eb93403e-dba1-4451-9b4f-01245707427a", "node_type": "1", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "3ac75cfdbb4a9f243cf867e4eaa0a4383a8b6bcf7006e7860dceb94b5091a0dd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9ad21cbc-6143-4aaf-ad4c-1e6dd50c98a9", "node_type": "1", "metadata": {}, "hash": "4bd5f5e89cc2f6722199ae9c2386ace3a945f5adb357a7210dcdcb4915bd7b29", "class_name": "RelatedNodeInfo"}}, "text": "V2:\n\nAnswer ='s : \n\nF = B'CD'E'F + A'B'CD'EF'G + B'CD'FG' + B'CDE'F' + B'CDF'G' + A'CDEFG + A'BC'DF'G' + A'BC'DEF' + A'BCDF + ABC'D'F' + ACD'F + ACDF'\n\nF = B'CE'G + B'CEG' + A'BC'EF'G' + A'BC'DE'F'G + A'BC'DEG' + A'BCEG + ABC'E'G' + ACE'G + ACEG'\n\nF = A'B'CEFG + A'B'CDF + A'B'CDEG\n\nF = A'CD'E'F'G' + A'BD'E' + A'BC'D'G + A'BC'E'F + BC'FG + A'BCE'F' + A'BCF'G' + AB'C'D'E'F'G' + ACDEFG + ABC'DG + ABC'DE + BCD'E'F'G' + ABCD'EF'G + ABCDE'FG'\n\nKey:  Bold = different, REDBOLD = new\n\n\n\n\n\nF = B'CD'E'F + A'B'CD'EF'G + B'CD'FG' + B'CDE'F' + B'CDF'G' + A'CDEFG + A'BC'DF'G' + A'BC'DEF' + A'BCDF + ABC'D'F' + ACD'F + ACDF'\n\n^ is wrong but I came to the same conclusion that my prime implicants table did, this means that the error is earlier in the code than the prime implicants table function, I also thought of a way to check the \u201cmatched_pairs_involved\u201d and make Shure that every midterm in the input is also included at least once in the output but I think that is a brute force method of solving it? And the function wouldn\u2019t actually be minimal?\n\n\n\nI found my next target for the bug!\n\n\nI don\u2019t quite remember how this is supposed to work, but I believe things are only supposed to get checked if the bin_rep hasn\u2019t shown up before?", "mimetype": "text/plain", "start_char_idx": 5084, "end_char_idx": 6316, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9ad21cbc-6143-4aaf-ad4c-1e6dd50c98a9": {"__data__": {"id_": "9ad21cbc-6143-4aaf-ad4c-1e6dd50c98a9", "embedding": null, "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200", "node_type": "4", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "20e347dbca983cf27af0c80c1fbda76c6dd093e3cf62306e611586bbeb9fd379", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ac82f54a-2c69-43ae-94c5-f7c31fc75a7b", "node_type": "1", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "ce628eca322568e44e66cea7c67f3e066a2a71297d58578674d816a7458327ad", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1f766ba6-b7dd-4a56-9813-0470316c1dab", "node_type": "1", "metadata": {}, "hash": "9f4e0e0262764dffd0d3d1812804f0ea77644f2837de2f42f1cce876b3df4d67", "class_name": "RelatedNodeInfo"}}, "text": "I found my next target for the bug!\n\n\nI don\u2019t quite remember how this is supposed to work, but I believe things are only supposed to get checked if the bin_rep hasn\u2019t shown up before?\n\n\n\n\n\nNext page ->\n\n\nINPUT:\n\nF(A,B,C,D,E,F,G) = Z'm(18,19,21,22,24,25,28,31,40,44,45,58,59,62,63,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,92,93,96,97,100,101,114,115,118,119,120,121,124,125)", "mimetype": "text/plain", "start_char_idx": 6133, "end_char_idx": 6528, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1f766ba6-b7dd-4a56-9813-0470316c1dab": {"__data__": {"id_": "1f766ba6-b7dd-4a56-9813-0470316c1dab", "embedding": null, "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200", "node_type": "4", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "20e347dbca983cf27af0c80c1fbda76c6dd093e3cf62306e611586bbeb9fd379", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9ad21cbc-6143-4aaf-ad4c-1e6dd50c98a9", "node_type": "1", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "b9fc53b56e5ae2fdad2bb99521784575c8ba23ac286e2dc84e0cc9954c7a4120", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9a0ecf07-3b69-41fc-80a9-60a0cc1ff8c5", "node_type": "1", "metadata": {}, "hash": "8c135e005eb68cf78d0feedd03dc7701c487d2078f7f6ebab046541e814e68c7", "class_name": "RelatedNodeInfo"}}, "text": "I found my next target for the bug!\n\n\nI don\u2019t quite remember how this is supposed to work, but I believe things are only supposed to get checked if the bin_rep hasn\u2019t shown up before?\n\n\n\n\n\nNext page ->\n\n\nINPUT:\n\nF(A,B,C,D,E,F,G) = Z'm(18,19,21,22,24,25,28,31,40,44,45,58,59,62,63,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,92,93,96,97,100,101,114,115,118,119,120,121,124,125)\n\n\n\nV1:\n\nF = B'CD'E'F + A'B'CD'EF'G + B'CD'FG' + B'CDE'F' + B'CDF'G' + A'CDEFG + A'BC'DF'G' + A'BC'DEF' + A'BCDF + ABC'D'F' + ACD'F + ACDF'\n\nF(A,B,C,D,E,F) = Z'm(18,19,21,22,24,25,28,31,40,44,45,58,59,62,63,82,83,86,87,88,89,92,93,96,97,100,101,114,115,118,119,120,121,124,125)\n\nV2:\n\nF = B'CD'E'F + A'B'CD'EF'G + B'CD'FG' + B'CDE'F' + B'CDF'G' + A'CDEFG + A'BC'DF'G' + A'BC'DEF' + A'BCDF + ABC'D'F' + ACD'F + ACDF' + AB'C'F + AB'C'D + AB'CD'E' + AB'CD'G'\n\nF(A,B,C,D,E,F) = Z'm(18,19,21,22,24,25,28,31,40,44,45,58,59,62,63,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,92,93,96,97,100,101,114,115,118,119,120,121,124,125)\n\nAlright I solved it as you can see above!", "mimetype": "text/plain", "start_char_idx": 6133, "end_char_idx": 7208, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9a0ecf07-3b69-41fc-80a9-60a0cc1ff8c5": {"__data__": {"id_": "9a0ecf07-3b69-41fc-80a9-60a0cc1ff8c5", "embedding": null, "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200", "node_type": "4", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "20e347dbca983cf27af0c80c1fbda76c6dd093e3cf62306e611586bbeb9fd379", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1f766ba6-b7dd-4a56-9813-0470316c1dab", "node_type": "1", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "9abd328d1745719c9d432f274591c4778fb3793a3e19de911ed6f72621fd3a1e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c95e9b0f-35fe-427c-bd5f-eb1c84310642", "node_type": "1", "metadata": {}, "hash": "e33f9a94850ac4733f68a64ffc5dbcda3a829e79a5be8752869a9a66a446ed85", "class_name": "RelatedNodeInfo"}}, "text": "I think I fumbled it together, but I didn\u2019t know what else to do!  \n\nMy solution to the bug in the end was to take the terms given by the user at the start and go though the old answer and if there were any numbers missing I went back to my prime implicants table and got the first answer inside that that satisfied my query, problem is that isn\u2019t part of the algorithm so I think this solution is like slapping a tank of draining water with flex tape!\n\nTop is old (wrong) bottom is new (correct):\n\n\n\n\n\n\n\nF(A,B,C,D,E,F,G) = Z'm(18,19,21,22,24,25,28,31,40,44,45,58,59,62,63,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,92,93,96,97,100,101,114,115,118,119,120,121,124,125)\n\nF(A,B,C,D,E,F,G) = Z'm(17,19,20,22,25,27,28,30,36,41,44,46,53,55,61,63,65,67,68,69,70,71,73,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,92,94,96,98,104,106,113,115,116,118,121,123,124,126)\n\nF(A,B,C,D,E,F,G) = Z'm(23,26,29,30,31)\n\nF(A,B,C,D,E,F,G) = Z'm(16,32,33,34,35,37,38,39,42,43,47,48,49,50,51,52,54,56,57,60,64,95,99,102,103,105,107,108,109,110,111,112,117,122,", "mimetype": "text/plain", "start_char_idx": 7209, "end_char_idx": 8269, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c95e9b0f-35fe-427c-bd5f-eb1c84310642": {"__data__": {"id_": "c95e9b0f-35fe-427c-bd5f-eb1c84310642", "embedding": null, "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200", "node_type": "4", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "20e347dbca983cf27af0c80c1fbda76c6dd093e3cf62306e611586bbeb9fd379", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9a0ecf07-3b69-41fc-80a9-60a0cc1ff8c5", "node_type": "1", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "12f366379607d5fa67b6e2744f9c36efbb7ca9104d53f6caaf09003743675e23", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d928eae1-0b64-46a9-be1c-e7bd8cb6f06c", "node_type": "1", "metadata": {}, "hash": "7a9da1b0f26d2eba4825caa92ba68f64f5368cc50a3e52aa8ac056b9e25a7027", "class_name": "RelatedNodeInfo"}}, "text": "46,53,55,61,63,65,67,68,69,70,71,73,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,92,94,96,98,104,106,113,115,116,118,121,123,124,126)\n\nF(A,B,C,D,E,F,G) = Z'm(23,26,29,30,31)\n\nF(A,B,C,D,E,F,G) = Z'm(16,32,33,34,35,37,38,39,42,43,47,48,49,50,51,52,54,56,57,60,64,95,99,102,103,105,107,108,109,110,111,112,117,122,127)\n\nV2:\n\nAnswer ='s : \n\nF = B'CD'E'F + A'B'CD'EF'G + B'CD'FG' + B'CDE'F' + B'CDF'G' + A'CDEFG + A'BC'DF'G' + A'BC'DEF' + A'BCDF + ABC'D'F' + ACD'F + ACDF'\n\nF = B'CE'G + B'CEG' + A'BC'EF'G' + A'BC'DE'F'G + A'BC'DEG' + A'BCEG + ABC'E'G' + ACE'G + ACEG'\n\nF = A'B'CEFG + A'B'CDF + A'B'CDEG\n\nF = A'CD'E'F'G' + A'BD'E' + A'BC'D'G + A'BC'E'F + BC'FG + A'BCE'F' + A'BCF'G' + AB'C'D'E'F'G' + ACDEFG + ABC'DG + ABC'DE + BCD'E'F'G' + ABCD'EF'G + ABCDE'FG'\n\nKey:  Bold = different,", "mimetype": "text/plain", "start_char_idx": 7955, "end_char_idx": 8740, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d928eae1-0b64-46a9-be1c-e7bd8cb6f06c": {"__data__": {"id_": "d928eae1-0b64-46a9-be1c-e7bd8cb6f06c", "embedding": null, "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200", "node_type": "4", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "20e347dbca983cf27af0c80c1fbda76c6dd093e3cf62306e611586bbeb9fd379", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c95e9b0f-35fe-427c-bd5f-eb1c84310642", "node_type": "1", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "4a430bf6eea2653ef529640eba6b593f6d33e15643d21cb6bf24ff11babfe4cf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "53c54415-96ba-4f9b-b0fc-f331063ccac9", "node_type": "1", "metadata": {}, "hash": "1b6af1a34f41eaedad1ab679b57894969df6c1857528f746327d88694b160480", "class_name": "RelatedNodeInfo"}}, "text": "REDBOLD = new\n\nV3:\n\nAnswer ='s :\n\nF = B'CD'E'F + A'B'CD'EF'G + B'CD'FG' + B'CDE'F' + B'CDF'G' + A'CDEFG + A'BC'DF'G' + A'BC'DEF' + A'BCDF + ABC'D'F' + ACD'F + ACDF' + AB'C'F + AB'C'D + AB'CD'E' + AB'CD'G'\n\nF = B'CE'G + B'CEG' + A'BC'EF'G' + A'BC'DE'F'G + A'BC'DEG' + A'BCEG + ABC'E'G' + ACE'G + ACEG' + AB'D'F'G + AB'C'G + AB'D'EF' + AB'C'E + AB'CD'F' + AB'CE'\n\nF = A'B'CEFG + A'B'CDFG' + A'B'CDEG\n\nF = A'CD'E'F'G' + A'BD'E' + A'BC'D'G + A'BC'E'F + BC'FG + A'BCE'F' + A'BCF'G' + AB'C'D'E'F'G' + ACDEFG + ABC'DG + ABC'DE + BCD'E'F'G' + ABCD'EF'G + ABCDE'FG' + A'BC'D'F + A'BD'FG' + BC'D'EF\n\n\n\nBroken:", "mimetype": "text/plain", "start_char_idx": 8741, "end_char_idx": 9340, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "53c54415-96ba-4f9b-b0fc-f331063ccac9": {"__data__": {"id_": "53c54415-96ba-4f9b-b0fc-f331063ccac9", "embedding": null, "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200", "node_type": "4", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "20e347dbca983cf27af0c80c1fbda76c6dd093e3cf62306e611586bbeb9fd379", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d928eae1-0b64-46a9-be1c-e7bd8cb6f06c", "node_type": "1", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "2bb9ba32499ff774560689aacd6f5c709fbe8ac3407f7e554f03638585b70086", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5790198a-f543-44c2-84aa-ef6df46862e4", "node_type": "1", "metadata": {}, "hash": "ad8a75b0b4efd18fdf4370b51ec2c65580a47a2eafcc58d3c38bc02d145b29cd", "class_name": "RelatedNodeInfo"}}, "text": "Broken:\n\n\n\n\nV4:\n\nF(A,B,C,D,E,F,G) = Z'm(18,19,21,22,24,25,28,31,40,44,45,58,59,62,63,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,93,96,97,100,101,114,115,118,119,120,121,124,125)\n\nF(A,B,C,D,E,F,G) = Z'm(17,19,20,22,25,27,28,30,36,41,44,46,53,55,61,63,65,67,68,69,70,71,73,75,76,77,78,79,80,81,82,83,84,86,88,89,90,91,92,94,96,98,104,106,113,115,116,118,121,123,124,126)\n\nF(A,B,C,D,E,F,G) = Z'm(23,26,29,30,31)\n\nF(A,B,C,D,E,F,G) = Z'm(16,32,33,34,35,37,38,39,42,43,47,48,49,50,51,52,54,56,57,60,64,95,99,102,103,105,107,108,109,110,111,112,117,122,127)", "mimetype": "text/plain", "start_char_idx": 9333, "end_char_idx": 9909, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5790198a-f543-44c2-84aa-ef6df46862e4": {"__data__": {"id_": "5790198a-f543-44c2-84aa-ef6df46862e4", "embedding": null, "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200", "node_type": "4", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "20e347dbca983cf27af0c80c1fbda76c6dd093e3cf62306e611586bbeb9fd379", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "53c54415-96ba-4f9b-b0fc-f331063ccac9", "node_type": "1", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "385e69c1f9875986602a8d3eb652d5c3387fa93052c7b7884be27e9e19fc5609", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "391e4a48-f00a-40eb-998f-4e187b7a0d12", "node_type": "1", "metadata": {}, "hash": "dcda1aa7b818689a1ae7699a39498e44339db4573ddc306f0a456a215b248938", "class_name": "RelatedNodeInfo"}}, "text": "Answer ='s : \n\nF = B'CD'E'F + B'CD'EF'G + B'CD'FG' + B'CDE'F' + B'CDF'G' + A'CDEFG + A'BC'DF'G' + A'BC'DEF' + A'BCDF + ABC'D'F' + ACD'F + ACDF' + AB'C'F + AB'C'D + AB'CD'\n\nF = B'CE'G + B'CEG' + A'BC'EF'G' + A'BC'DE'F'G + A'BC'DEG' + A'BCEG + ABC'E'G' + ACE'G + ACEG' + AB'C'G + AB'C'E + AB'CE'\n\nF = A'B'CEFG + A'B'CDFG' + A'B'CDEG\n\nF = A'CD'E'F'G' + A'BD'E' + A'BC'D'G + A'BC'E'F + BC'FG + A'BCE'F' + A'BCF'G' + AB'C'D'E'F'G' + AB'CDEG + ABC'DG + ABC'DE + BCD'E'F'G' + ABCD'EF'G + ABCDE'FG' + A'BC'D'F + A'BD'FG' + BC'D'EF + ACDEFG\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe class ended so from here on out I must go rouge!\n\nToday, 5/2/2024, I focused on making the program usable from a user\u2019s perspective.\n\nLet\u2019s face it unless you\u2019re a super genius its essentially not possible to go create a minterm function without first having a truth table to look at! Well, that is what I solve with this version.", "mimetype": "text/plain", "start_char_idx": 9913, "end_char_idx": 10794, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "391e4a48-f00a-40eb-998f-4e187b7a0d12": {"__data__": {"id_": "391e4a48-f00a-40eb-998f-4e187b7a0d12", "embedding": null, "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200", "node_type": "4", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "20e347dbca983cf27af0c80c1fbda76c6dd093e3cf62306e611586bbeb9fd379", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5790198a-f543-44c2-84aa-ef6df46862e4", "node_type": "1", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "a7a043fea5f76bde7c41e105c0b05660c61ba4f9153b373f040be3ccc88e877a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7f329b3f-9e1d-4997-b101-665a0dd098c6", "node_type": "1", "metadata": {}, "hash": "c94074d1216527540f490dba69d4ae818796c2d36c767bb662a365d2362d4411", "class_name": "RelatedNodeInfo"}}, "text": "The class ended so from here on out I must go rouge!\n\nToday, 5/2/2024, I focused on making the program usable from a user\u2019s perspective.\n\nLet\u2019s face it unless you\u2019re a super genius its essentially not possible to go create a minterm function without first having a truth table to look at! Well, that is what I solve with this version.\n\n\n\nIn the middle is the truth table section, on the right is the controls, and on the left is the output.\n\nTo interface with the truth table you just have to click on the output num you want to change and it will flip between 0 and 1. If you want a bigger or smaller truth table, just enter the number into the #inputs box and click generate table button.\n\nThe Maxterms button doesn\u2019t work yet because of code in the back end, but the minterms button works great here is an example:\n\n\n\nAs you can see I expanded the Truth Table and generated an answer. \n\n\nThink Aloud 7\n\nDisclaimer, you should probably look into reading my older think aloud\u2019s at the end of the document before reading the newest one \ud83d\ude09.\n\nBecause this if the final week I decided that I would take my program is it is, even though there are many things wrong with It, and package it up into a little GUI. Here are all the menus:\n\nMain menu:\n\n\n\nTruth Table to Gates:\n\n\n\nGates to Truth Table:\n\n\n\nInfo:", "mimetype": "text/plain", "start_char_idx": 10460, "end_char_idx": 11760, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7f329b3f-9e1d-4997-b101-665a0dd098c6": {"__data__": {"id_": "7f329b3f-9e1d-4997-b101-665a0dd098c6", "embedding": null, "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200", "node_type": "4", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "20e347dbca983cf27af0c80c1fbda76c6dd093e3cf62306e611586bbeb9fd379", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "391e4a48-f00a-40eb-998f-4e187b7a0d12", "node_type": "1", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "3c9fce39d7daadbe7fc796a472ed6330545be8bdf58b5dd9beeba85cc8df22e1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cec785c1-7d70-4a6d-a2b6-bfae2fb7c302", "node_type": "1", "metadata": {}, "hash": "eb26cc2609543473f26af7cf4ea500b3abd3ec2fd07c9394bd90d0bde4bd00fc", "class_name": "RelatedNodeInfo"}}, "text": "As you can see I expanded the Truth Table and generated an answer. \n\n\nThink Aloud 7\n\nDisclaimer, you should probably look into reading my older think aloud\u2019s at the end of the document before reading the newest one \ud83d\ude09.\n\nBecause this if the final week I decided that I would take my program is it is, even though there are many things wrong with It, and package it up into a little GUI. Here are all the menus:\n\nMain menu:\n\n\n\nTruth Table to Gates:\n\n\n\nGates to Truth Table:\n\n\n\nInfo:\n\n\n\nI want to note that this program as it is does not look the way I want it to end the end. Here are some ideas I have to drastically improve this GUI program.\n\nMake the TTG have an interactable Truth table that I can resize and edit as I want so that I can see exactly what I am doing.\n\nMake the GTT have a interactable Truth table that I can look though and skim for mistakes or for fun.\n\nAt least make it possible to obtain all of the functionality from the original CLI programs, because right now the only thing you get is the answer. This additional information could be in a TOAST or some another pane, but I want more context than just the answers from these programs.\n\nI want the Info page to actually go into how this works, so that anyone just finding the program could possibly understand it without any exterior knowledge.\n\n\u2026 \n\nAnd so on, I could continue listing features I wanted to add forever but at this poing im just glad I got a baseline functional program up and running.\n\nThanks for reading up to this point.\n\nAdditionally I want to add that last week I spent the entire time trying to learn how to implement this but in a game engine.", "mimetype": "text/plain", "start_char_idx": 11281, "end_char_idx": 12919, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cec785c1-7d70-4a6d-a2b6-bfae2fb7c302": {"__data__": {"id_": "cec785c1-7d70-4a6d-a2b6-bfae2fb7c302", "embedding": null, "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200", "node_type": "4", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "20e347dbca983cf27af0c80c1fbda76c6dd093e3cf62306e611586bbeb9fd379", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7f329b3f-9e1d-4997-b101-665a0dd098c6", "node_type": "1", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "ca705013cf6e7a09da4864d7aedec24c7ce2924990f91dd786d20fdaf1c444a5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "92ade2a8-4c49-43d0-9dfc-12758ca4efae", "node_type": "1", "metadata": {}, "hash": "da63970aa58f9d7289a22e9118e4c868276d9fe90dacd5b723535f093ec004c5", "class_name": "RelatedNodeInfo"}}, "text": "To give you some insight on what I am imagine I will explain it here.\n\nI want an application that has a interactive GUI. I want to be able to make chips, calculate Truth Tables, Minimize circuits, play with Gates\u2026 because from the very beginning almost a year ago now this is what the point of this project if for. I want to make a real \u201cLogic Simulator\u201d that would be fun so anyone could learn how logic works. I wanted to at least break ground on it this week (hence the reason last week was spent by me learning unreal engine), but then I realized that this was the last week and I wouldn\u2019t have anywhere near enough time to get working on a functional product to show at the end. \n\nAnyway if I manage to make this in the future I will be so happy because it has been my dream for a long time now. There just are not any real logic simulators made for ordinary people to play with. The closest one is Sebastian Lague's \u201cLogicSim\u201d that uses Unity engine as the back end, my only issue with it is that it does not include ways to generate truth tables, or minimize circuits or ways to expand beyond the frame of the window your given at the start. \n\nWell anyway Thank you guys for Reading but I know for a fact nobody cares about this anyway\u2026 \u2639 welp if you are reading this and do care I am so thankful I can share my enthusiasm with you Maby you would want to get in touch with me at some point so here is my email aidan.t.newberry@gmail.com. I hope so bad that someday I will get this project to a place that I am satisfied with. Thanks for reading!\n\n\n\n\nThink Aloud 6\n\nDisclaimer, You should probably look into reading my older think aloud\u2019s at the end of the document before reading the newest one \ud83d\ude09.\n\nThis week I made a few discoveries and some big progress, The first and most major thing would be the completion of my gates to truth table program in python. Every major feature I wanted to add has been added and the biggest difference from last week is the SQL table output. Here is a few test cases being successfully ran:", "mimetype": "text/plain", "start_char_idx": 12924, "end_char_idx": 14955, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "92ade2a8-4c49-43d0-9dfc-12758ca4efae": {"__data__": {"id_": "92ade2a8-4c49-43d0-9dfc-12758ca4efae", "embedding": null, "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200", "node_type": "4", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "20e347dbca983cf27af0c80c1fbda76c6dd093e3cf62306e611586bbeb9fd379", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cec785c1-7d70-4a6d-a2b6-bfae2fb7c302", "node_type": "1", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "726c159e29b2160258f0968f55e66da5c3b7f40b79c0e6637b423012e06228ff", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e64ba14c-4646-4945-a624-fe6bc00fdbb4", "node_type": "1", "metadata": {}, "hash": "726e8563385b16cd77b684c231fc43abaa110fc48bfb1e64f7c0af6cf40cfd69", "class_name": "RelatedNodeInfo"}}, "text": "Think Aloud 6\n\nDisclaimer, You should probably look into reading my older think aloud\u2019s at the end of the document before reading the newest one \ud83d\ude09.\n\nThis week I made a few discoveries and some big progress, The first and most major thing would be the completion of my gates to truth table program in python. Every major feature I wanted to add has been added and the biggest difference from last week is the SQL table output. Here is a few test cases being successfully ran:\n\n\n\nAs you can see it runs nice and efficently. The worst part of this program is writing the table to the drive. For longer functions it has to write many MANY thousands of lines to the drive. I havent looked into it seriously yet but because of this serious oversight it can take a few days to write some of these truthtables to a SQL table. Here is the biggest table the program supports writing, but it literally took my server 4 days of solid work to calculate it:\n\n\n\nThis table has 22,400,000 different combinations, so you can see why it too so long to write to the drive line by line. I hope to make this process faster in the future. In other news I took a field trip to Iowa and on the way I directly translated the this program\u2019s init function to CPP hoping to make the calculations faster. Only issue is it didn\u2019t make it faster the python version is actually 45% faster than the CPP version. I really didn\u2019t expect this to be the case, but for this reason I made a time tester version of the program here are the results:\n\n\n\n\n\nAs you can see its not great, my current hypothesis for why the CPP version is slower is because of the inneficencies in the array archetecture I used. In python I used some built in functions to do what I wanted to happen, but in cpp I literally had to make my own class to interface with an array. Its literally a mess. Though I have two ovious way to speed up the CPP version! Num1, make the function that does all the calculations multithreaded! This might be easy, but honestly probbly not. Num2, make the list interfacing better. I don\u2019t exactly know how to do this but if I can that would be awesome!", "mimetype": "text/plain", "start_char_idx": 14481, "end_char_idx": 16602, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e64ba14c-4646-4945-a624-fe6bc00fdbb4": {"__data__": {"id_": "e64ba14c-4646-4945-a624-fe6bc00fdbb4", "embedding": null, "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200", "node_type": "4", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "20e347dbca983cf27af0c80c1fbda76c6dd093e3cf62306e611586bbeb9fd379", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "92ade2a8-4c49-43d0-9dfc-12758ca4efae", "node_type": "1", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "385a95cfe7f06be773ab2239d3f160d46afde177f2cccf274ab2257f1d4f5531", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4d5d3411-87d8-4cc7-84ce-6fa42cabb5c8", "node_type": "1", "metadata": {}, "hash": "460d44621f65c3a2fcf671dceaab5f33eb13ef82e2babb2d54dbf1176c0deb0d", "class_name": "RelatedNodeInfo"}}, "text": "As you can see its not great, my current hypothesis for why the CPP version is slower is because of the inneficencies in the array archetecture I used. In python I used some built in functions to do what I wanted to happen, but in cpp I literally had to make my own class to interface with an array. Its literally a mess. Though I have two ovious way to speed up the CPP version! Num1, make the function that does all the calculations multithreaded! This might be easy, but honestly probbly not. Num2, make the list interfacing better. I don\u2019t exactly know how to do this but if I can that would be awesome!\n\n\n\n\nThink Aloud 5\n\nDisclaimer, You should probably look into reading my older think aloud\u2019s at the end of the document before reading the newest one \ud83d\ude09.\n\nRemember last week how I needed to automate validating my logic gates via simulating them? Well that is what I did this week!\n\n\n\nAs you can see in this screen shot the commented lines are what I inputed into my other program to minimize the logic, the Function notation written in string format is what I received as an output. This program literally has one job, to return the same thing I put into the last program. (and also make and format me a truth table if I want it\u2026 but I havent implement that yet \ud83d\ude0a). Here are the results of these three test cases:\n\n\n\nI love this so much better than my shitty program last semester, Both of these programs output their results within a few milliseconds where as my last attempt could take minuits to hours because I was brute forcing them. I am excited to have this done and next time I will be working on my GUI.\n\n\n\n\nThink Aloud 4\n\nDisclaimer, You should probably look into reading my older think aloud\u2019s at the end of the document before reading the newest one \ud83d\ude09.\n\nThis week was amazing, I likely put over 30 hours into this project this week alone and have made more progress than all the week prior combined.\n\nGetting straight to the point however I wrote over 1000 lines of code this week. Most of which were implementing the algorithm but many of them were in the CLI program.\n\nHere is the CLI program in action:", "mimetype": "text/plain", "start_char_idx": 15995, "end_char_idx": 18118, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4d5d3411-87d8-4cc7-84ce-6fa42cabb5c8": {"__data__": {"id_": "4d5d3411-87d8-4cc7-84ce-6fa42cabb5c8", "embedding": null, "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200", "node_type": "4", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "20e347dbca983cf27af0c80c1fbda76c6dd093e3cf62306e611586bbeb9fd379", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e64ba14c-4646-4945-a624-fe6bc00fdbb4", "node_type": "1", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "e34b7a34ba080295937d21b39cfc80899584211f736f44975226ae5e6e8ec2fd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3a4a4e2c-2b15-449b-8ef0-0b627c8839a2", "node_type": "1", "metadata": {}, "hash": "70bfbc8257337beda440ba609a6fc125410280ce7ac34c5d378bd145629fb706", "class_name": "RelatedNodeInfo"}}, "text": "I love this so much better than my shitty program last semester, Both of these programs output their results within a few milliseconds where as my last attempt could take minuits to hours because I was brute forcing them. I am excited to have this done and next time I will be working on my GUI.\n\n\n\n\nThink Aloud 4\n\nDisclaimer, You should probably look into reading my older think aloud\u2019s at the end of the document before reading the newest one \ud83d\ude09.\n\nThis week was amazing, I likely put over 30 hours into this project this week alone and have made more progress than all the week prior combined.\n\nGetting straight to the point however I wrote over 1000 lines of code this week. Most of which were implementing the algorithm but many of them were in the CLI program.\n\nHere is the CLI program in action:\n\n\n\n\n\nAt the end you will knotice the \u201cF = B\u2019C + CD\u201d this is the minimized form of the input function.\n\nIt is literally our answer, but still the program is only 1/3 the way to being fully functional. We cannot as of this moment solve for Maxterms or take In accout for Don\u2019t Cares.\n\nHere is a few test cases with the program as it stands:\n\n\n\n\n\nWords\n\n\n\nThe next logical thing to do however is not finish my program because how am I supposed to know if my outputs are even good? But the next step is to Test them, but rn I am way to lazy to actually program more so im going to build them in miencraft.\n\nThe input function \u201cF(A,B,C,D)=Z'm(0,1,3,7,8,9,11,15)\u201d this means there is four inputs, A, B, C, D. and when the inputs = the decimal numbers (0,1,3,7,8,9,11,15) we will get a high (1) output\n\n\n\nHere is the miencraft equivelent to Test 1:\n\n\n\n\nMinterm 0 \u2013 0000:\n\n\n\nMinterm 1 \u2013 0001: \n\n\n\nMinterm 2 \u2013 0010:\n\n\n\nMinterm 3 \u2013 0011:\n\n\n\nMinterm 4 \u2013 0100:\n\n\n\nMinterm 5 \u2013 0101:\n\n\n\nMinterm 6 \u2013 0110:", "mimetype": "text/plain", "start_char_idx": 17318, "end_char_idx": 19109, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3a4a4e2c-2b15-449b-8ef0-0b627c8839a2": {"__data__": {"id_": "3a4a4e2c-2b15-449b-8ef0-0b627c8839a2", "embedding": null, "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200", "node_type": "4", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "20e347dbca983cf27af0c80c1fbda76c6dd093e3cf62306e611586bbeb9fd379", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4d5d3411-87d8-4cc7-84ce-6fa42cabb5c8", "node_type": "1", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "afb9502adc53ec093ee3629544760a2520437eb2f5d05f52cbd1aa4235dac4f9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "990ae4a3-8137-45da-b19a-d09a1f8f1c44", "node_type": "1", "metadata": {}, "hash": "d8c7ce94df93041df8a3f1a24ce87f9a3d509e89fd02c9df5bfd89c4778ff9b8", "class_name": "RelatedNodeInfo"}}, "text": "Here is the miencraft equivelent to Test 1:\n\n\n\n\nMinterm 0 \u2013 0000:\n\n\n\nMinterm 1 \u2013 0001: \n\n\n\nMinterm 2 \u2013 0010:\n\n\n\nMinterm 3 \u2013 0011:\n\n\n\nMinterm 4 \u2013 0100:\n\n\n\nMinterm 5 \u2013 0101:\n\n\n\nMinterm 6 \u2013 0110:\n\n\n\nMinterm 7 \u2013 0111:\n\n\n\nMinterm 8 \u2013 1000:\n\n\n\nMinterm 9 \u2013 1001:\n\n\n\nMinterm 10 \u2013 1010:\n\n\n\nMinterm 11 \u2013 1011:\n\n\n\nMinterm 12 \u2013 1100:\n\n\n\nMinterm 13 \u2013 1101:\n\n\n\nMinterm 14 \u2013 1110:\n\n\n\nMinterm 15 \u2013 1111:\n\n\n\nAnd so you see it does actually work, I did actually create a miencraft equivelent to the Test 2 test case but that would be 32 photos you would have to look at so I didn\u2019t post them here, just know it does actually work.\n\n\n\nThe next thing Im going to be working on is the LogicGates to TruthTable code. This will let me test the output of my code without having to physically build its analog inside of minecraft. I have only just started with this program\u2019s code so it is nowhere close to being ready, though it is much simpliar to implement than the other program.\n\n\n\n\n\nAnyway, Thanks for Reading! It means a lot to me\n\n\nThink Aloud 3\n\nDisclamer, All prior Think allouds are in order at the bottom of this document, I highly recommend you atleast skim them if you want the background for this new Think Aloud.", "mimetype": "text/plain", "start_char_idx": 18917, "end_char_idx": 20120, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "990ae4a3-8137-45da-b19a-d09a1f8f1c44": {"__data__": {"id_": "990ae4a3-8137-45da-b19a-d09a1f8f1c44", "embedding": null, "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200", "node_type": "4", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "20e347dbca983cf27af0c80c1fbda76c6dd093e3cf62306e611586bbeb9fd379", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3a4a4e2c-2b15-449b-8ef0-0b627c8839a2", "node_type": "1", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "01d4732975c95e8ad53b88b998eba93f023a1ffcc06b46d974461b96e4f01b36", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6ed8fe1a-4d87-44f7-bb2c-bfa0a96f7e95", "node_type": "1", "metadata": {}, "hash": "6c58e2625145b7bc8e9fa84a6479517d44a703c33085ec923b6529abd9ffa6fa", "class_name": "RelatedNodeInfo"}}, "text": "Minterm 15 \u2013 1111:\n\n\n\nAnd so you see it does actually work, I did actually create a miencraft equivelent to the Test 2 test case but that would be 32 photos you would have to look at so I didn\u2019t post them here, just know it does actually work.\n\n\n\nThe next thing Im going to be working on is the LogicGates to TruthTable code. This will let me test the output of my code without having to physically build its analog inside of minecraft. I have only just started with this program\u2019s code so it is nowhere close to being ready, though it is much simpliar to implement than the other program.\n\n\n\n\n\nAnyway, Thanks for Reading! It means a lot to me\n\n\nThink Aloud 3\n\nDisclamer, All prior Think allouds are in order at the bottom of this document, I highly recommend you atleast skim them if you want the background for this new Think Aloud.\n\n\n\nOK! So I did a lot of work on my project this week. The work can be summarized in two big steps.\n\nI took another 7 pages of notes to finally understand what im doing.\n\nI started implementing my project in Python using all the skills we learned last semester in Intro to CC.\n\nHere is the notes I took, The summary is: \n\nI know what Implicants, Prime Implicants and Essential Prime Implicants are.\n\nI know how to calculate K\u2019Maps using Don\u2019t care.\n\nI know how to Calculate 4 Variable K\u2019Maps\n\nI know how to Calculate a K\u2019Map Using MaxTerms instead of minterms.\n\nI know how to Calculate 5 Variable K\u2019Maps\n\nAnd finally, I know how to calculate the minimal form of a boolean equation using the \u201cQuine-McCluskey\u201d technique.\n\nHere is a link to the playlist is made to teach me these consepts: https://www.youtube.com/playlist?list=PLZI75QDLkI8-tFs5Ofs1-Ul1Gx10wunLM\n\nHere are my notes if you want to look at them, though I doubt you can read them because I can\u2019t either:", "mimetype": "text/plain", "start_char_idx": 19286, "end_char_idx": 21086, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6ed8fe1a-4d87-44f7-bb2c-bfa0a96f7e95": {"__data__": {"id_": "6ed8fe1a-4d87-44f7-bb2c-bfa0a96f7e95", "embedding": null, "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200", "node_type": "4", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "20e347dbca983cf27af0c80c1fbda76c6dd093e3cf62306e611586bbeb9fd379", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "990ae4a3-8137-45da-b19a-d09a1f8f1c44", "node_type": "1", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "10ad210ac70227096364f86b6888792a84d7aa6d862c2fe9157126249c6f349f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3095cc7c-009f-4823-a76f-05c925d55cb2", "node_type": "1", "metadata": {}, "hash": "932058b6949005c0b72b2f41aa49be0c05a77a89610a9e33de4d8dbd4c3b9d0d", "class_name": "RelatedNodeInfo"}}, "text": "Pt2:\n\n \n\nNow the seccond part is a bit more interesting because I finally was able to actually start on the programming part of things. The first thing I did was split my LogicThursday Repo into two different folders, the old LogicSim(original) and the new LogicSim (QuineMcCluskey). Then I made a folder called TruthTable to Gates, and inside of that I made three python scrips called \u201cCLITruthTableToGates.py\u201d,\u201dGUITruthTableToGates.py\u201d,and\u201dTruthTableToGatesThinker.py.\u201d These are all self explanitory, but the CLI is the only place I have put any code for interfacing with Thinker at the moment, and Thinker has most of my time put into it. Inside of Thinker I have written around 200 Lines of text and Code describing What I need done, where, and how. I have made my Thinker object as close to done as possible without actually starting to write the algorithm.\n\n\n\nAt the moment this is what happens if I run the program from the CLITtoG:\n\n\n\n\n\nAs you can see all I have done is make some test cases for my program so that I know I have the input and output of my program solved. I am using Getters to retrieve any information that I may need from my TruthTableToGates Object. \n\nIm so glad I am finally getting to understand this project and what I need to do to make things work. But other than that, here is a link to my repo: https://github.com/regtoga/LogicThursday and I want you to have a nice day! I you want to find me I will be working on the next submission for my Think Alloud Week 8.", "mimetype": "text/plain", "start_char_idx": 21096, "end_char_idx": 22592, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3095cc7c-009f-4823-a76f-05c925d55cb2": {"__data__": {"id_": "3095cc7c-009f-4823-a76f-05c925d55cb2", "embedding": null, "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200", "node_type": "4", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "20e347dbca983cf27af0c80c1fbda76c6dd093e3cf62306e611586bbeb9fd379", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6ed8fe1a-4d87-44f7-bb2c-bfa0a96f7e95", "node_type": "1", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "83f77c226c6760096e54d7cbdd72dba07cf27be50090b641f51d2530ec9a37ae", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "122d234c-9960-4573-a724-8c430ec7fd0f", "node_type": "1", "metadata": {}, "hash": "7b8742e49a66e7257fd17abf09bced4ca05036749e58c6ace3a99e0708bf463d", "class_name": "RelatedNodeInfo"}}, "text": "At the moment this is what happens if I run the program from the CLITtoG:\n\n\n\n\n\nAs you can see all I have done is make some test cases for my program so that I know I have the input and output of my program solved. I am using Getters to retrieve any information that I may need from my TruthTableToGates Object. \n\nIm so glad I am finally getting to understand this project and what I need to do to make things work. But other than that, here is a link to my repo: https://github.com/regtoga/LogicThursday and I want you to have a nice day! I you want to find me I will be working on the next submission for my Think Alloud Week 8.\n\n\n\n\n\n\nThink Aloud 2\n\nThis is Pt2, if your wondering whats happening here I will append my last Think Aloud to the bottom so if you want to catch up you can. \n\nLink To The Learning Resources i used to figure this stuff out.\n\nSo since last time a lot has happened, but let me start out by saying, whatever it is im trying to solve its very complex. I have essentially started taking another class to understand this topic by itself. From what I have found my problem is defined as the \u201cminimization of truthtables.\u201d From my research there are three main ways to minimize a truthtable and its accompanying logic, they go inorder from:\n\nboolean algebra\n\nKarnaugh Map (K\u2019 Map)\n\nQuine-McCluskey Minimization Technique\n\nThese three methods are all equally valid except for different senarios.\n\nNumber one. Boolean Algebra is essentially using algebra but on boolean numbers and with a few odd rules. Think back to your math class when your teacher asked you to simplify an expression, well Boolean Algebra can be used like that. \n\nBoolean Algebra notes:", "mimetype": "text/plain", "start_char_idx": 21963, "end_char_idx": 23639, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "122d234c-9960-4573-a724-8c430ec7fd0f": {"__data__": {"id_": "122d234c-9960-4573-a724-8c430ec7fd0f", "embedding": null, "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200", "node_type": "4", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "20e347dbca983cf27af0c80c1fbda76c6dd093e3cf62306e611586bbeb9fd379", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3095cc7c-009f-4823-a76f-05c925d55cb2", "node_type": "1", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "76fad85f29b8c3f882bb3df545b6ff63fb811e886c14d552f6ddcd56df71e795", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "739a35eb-8dc1-4c5f-a59f-92e2e4012a56", "node_type": "1", "metadata": {}, "hash": "7b2333bff8ea03c10294727b0dca7443d2b8a6a20ebe4f4311d7aeb3f7078f8a", "class_name": "RelatedNodeInfo"}}, "text": "Number Two, Karnaugh Maps. K maps are essentially a way to organize your truthtable in such a way that if you look at it correctly the minimum SoP(Sum of Products) just pops out at you. Obiously it is more complicated than that, but I don\u2019t feel like explaining it when I can just paste my notes into my word document. It is also important that Boolean Algebra and this step I needed to learn about SoPs and how to find them, what a minterm and Maxterm(\u2018s) are how to and what the minimal SoP form means/is. I also learnt that the most efficent way to store a truthtable is in this format F(INPUTS) = (Minterms that equled 1 here). It ends up looking like this: F(A,B,C)=Z`m(0,2,5,6,7). From this data I can construct a truth table that looks like this:\n\nA\n\nB\n\nC\n\nF\n\n0\n\n0\n\n0\n\n1(m0)\n\n0\n\n0\n\n1\n\n0\n\n0\n\n1\n\n0\n\n1(m2)\n\n0\n\n1\n\n1\n\n0\n\n1\n\n0\n\n0\n\n0\n\n1\n\n0\n\n1\n\n1(m5)\n\n1\n\n1\n\n0\n\n1(m6)\n\n1\n\n1\n\n1\n\n1(m7)\n\nAnyWay here is my Notes:\n\n\n\n\n\nNow, I did not have time this week to get to the Third minimization technique, or enough time to implement any of these techniques, but I want to thank anyone who made it this far in my rant, Thanks! I hope to have more tangable progress next week.\n\n\n\n\nThink Aloud 1", "mimetype": "text/plain", "start_char_idx": 23653, "end_char_idx": 24832, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "739a35eb-8dc1-4c5f-a59f-92e2e4012a56": {"__data__": {"id_": "739a35eb-8dc1-4c5f-a59f-92e2e4012a56", "embedding": null, "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdb6182c-fbe8-48bb-b380-b0a2236c1200", "node_type": "4", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "20e347dbca983cf27af0c80c1fbda76c6dd093e3cf62306e611586bbeb9fd379", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "122d234c-9960-4573-a724-8c430ec7fd0f", "node_type": "1", "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}, "hash": "352978bd3b398105ddf56ad02a6136de85a31591b82ff720c7ed91622cc3449b", "class_name": "RelatedNodeInfo"}}, "text": "Now, I did not have time this week to get to the Third minimization technique, or enough time to implement any of these techniques, but I want to thank anyone who made it this far in my rant, Thanks! I hope to have more tangable progress next week.\n\n\n\n\nThink Aloud 1\n\n\nFor my Think Alouds this semester I want to do one of three things building from last semester\u2019s think-alouds. \n\nFirst some context on my project, \u201cLogic Thursday\u201d at this moment is MY creation, I have had ZERO help creating it. This is important because up to this point, I have only used my background knowledge and my first most obvious algorithm to solve the issue. This being said from this point on I will be using Google and possibly chat-GPT to find ways to improve my program. I have rules for myself still though, I CANNOT copy and paste code from GPT into my project and I have to understand the algorithms I may want to implement into my code. The purpose of this activity has always been for me to see exactly how far I can take something that I want to make, not how many ideas can I steal from other people.\n\n\n\n The three things are:\n\nFind an algorithm, whether it be related to \"Circuit Complexity\" or optimizing my current brute force method to hasten the time taken to calculate a good/decent solution to a problem.\n\n(This depends on number 1) Port my \u201cLogic Thursday\u201d code to CPP directly and test the speed increase!\n\nSubGoals:\n\nMake my CPP Logic Thursday Multithreaded! (i want my program as fast as possible)\n\n(This depends on number 2) This slightly deviates from the others I have listed, but I would like however possible create a GUI to connect Logic gates visually and or render visually already created logic gate arrays. This would likely be easiest in Unity, but I want to keep it in CPP so I might use Unreal. This gives the added benefit of providing me with built-in Lumin and Nanite support, making it possible to make each gate possibly consist of thousands of polygons all while utilizing global illumination to light the scene. (sorry, this is today's version of humor)\n\n\n\nAnyway, I plan to get working on this asap, and thanks for reading!", "mimetype": "text/plain", "start_char_idx": 24566, "end_char_idx": 26712, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"957c79f3-d335-4ff2-b164-602ff787b229": {"node_ids": ["cd80c2e4-ec81-43d0-bd2c-c0c8a0a4a5bf"], "metadata": {"filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\build\\exe.win-amd64-3.11\\A'C'+AC.txt"}}, "3db9074b-365c-48fc-bcbc-a875d8b43871": {"node_ids": ["6a78305d-6635-4d37-8ca5-932879e8c8b8", "cccbc9d2-4686-4031-b6c3-678c4f1ba505"], "metadata": {"filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\build\\exe.win-amd64-3.11\\frozen_application_license.txt"}}, "3e0ede1f-a6b8-4aad-b842-13aebd3b2e35": {"node_ids": ["768686d5-3183-47e7-a221-e09b52b20c75"], "metadata": {"filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\build\\exe.win-amd64-3.11\\lib\\GUIsForMainGUI\\info.txt"}}, "1c692429-bc94-49ec-b24e-8d18d7ae2c02": {"node_ids": ["140a52fa-3870-4af9-81d0-48dd9524e7ad"], "metadata": {"filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\GUIsForMainGUI\\info.txt"}}, "fdb6182c-fbe8-48bb-b380-b0a2236c1200": {"node_ids": ["67c3552f-5781-43c6-9986-33391eb560fb", "19f8282b-4657-4521-b003-0e3f34d444d9", "38840c46-4c84-496d-9638-18a3693e2db8", "c9af06be-6f82-4781-af1f-d424938f11db", "e9a0b72e-8110-4170-a835-7a7bd8b6c71c", "eb93403e-dba1-4451-9b4f-01245707427a", "ac82f54a-2c69-43ae-94c5-f7c31fc75a7b", "9ad21cbc-6143-4aaf-ad4c-1e6dd50c98a9", "1f766ba6-b7dd-4a56-9813-0470316c1dab", "9a0ecf07-3b69-41fc-80a9-60a0cc1ff8c5", "c95e9b0f-35fe-427c-bd5f-eb1c84310642", "d928eae1-0b64-46a9-be1c-e7bd8cb6f06c", "53c54415-96ba-4f9b-b0fc-f331063ccac9", "5790198a-f543-44c2-84aa-ef6df46862e4", "391e4a48-f00a-40eb-998f-4e187b7a0d12", "7f329b3f-9e1d-4997-b101-665a0dd098c6", "cec785c1-7d70-4a6d-a2b6-bfae2fb7c302", "92ade2a8-4c49-43d0-9dfc-12758ca4efae", "e64ba14c-4646-4945-a624-fe6bc00fdbb4", "4d5d3411-87d8-4cc7-84ce-6fa42cabb5c8", "3a4a4e2c-2b15-449b-8ef0-0b627c8839a2", "990ae4a3-8137-45da-b19a-d09a1f8f1c44", "6ed8fe1a-4d87-44f7-bb2c-bfa0a96f7e95", "3095cc7c-009f-4823-a76f-05c925d55cb2", "122d234c-9960-4573-a724-8c430ec7fd0f", "739a35eb-8dc1-4c5f-a59f-92e2e4012a56"], "metadata": {"file_name": "Readme.docx", "filename": "C:\\Users\\aidan\\Documents\\GitHub\\LogicThursday\\LogicThursdayProgram\\Readme.docx"}}}}